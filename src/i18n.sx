let instance;

function Language(dict, version) {
	this.dict = dict;
	this.locale = (&this.getDefaultLocale()).localStorage("sactory.i18n.locale", version);
	instance = this;
}

Language.prototype.getDefaultLocale = function(){
	const langs = this.languages.map(lang => {
		const cased = lang.toLowerCase();
		const sep = cased.indexOf("-");
		if(sep == -1) {
			return {lang: lang, code: cased};
		} else {
			return {lang: lang, code: cased.substring(0, sep), country: cased.substr(sep + 1)};
		}
	});
	for(let i=0; i<window.navigator.languages; i++) {
		const nl = window.navigator.languages[i].toLowerCase();
		const sep = nl.indexOf("-");
		const code = sep == -1 ? nl : nl.substring(0, sep);
		const country = sep != -1 && nl.substr(sep + 1);
		for(let j=0; j<langs.length; j++) {
			const lang = langs[j];
			if(code == lang.code && (!lang.country || country == lang.country)) return lang.lang;
		}
	}
	return langs[0].lang;
};

Object.defineProperty(Language.prototype, "languages", {
	get() {
		return Object.keys(this.dict);
	}
});

Language.prototype.get = function(key, args, lang){
	let ret = this.dict[lang || this.*locale][key];
	if(ret) {
		if(args) {
			for(let key in args) {
				ret = ret.replace("{" + key + "}", args[key]);
			}
		}
		return ret;
	} else {
		return "??" + key + "??";
	}
};

Sactory.addWidget("lang", function(attrs){

	if(typeof attrs == "string") attrs = {text: attrs};

	const args = attrs.args;
	delete attrs.args;

	const deps = [instance.locale];
	if(args) {
		for(let key in args) {
			const arg = args[key];
			if(Sactory.isObservable(arg)) {
				deps.push(arg);
			}
		}
	}

	return <?#document-fragment>
		foreach(attrs as name: attr) {
			const value = Sactory.bo(() => instance.get(attr, args), deps);
			if(name == "text" || name == "html") {
				<:element ~[name]=value />
			} else {
				<:element [name]=value />
			}
		}
	</#document-fragment>

});

return { default: Language, Language };
